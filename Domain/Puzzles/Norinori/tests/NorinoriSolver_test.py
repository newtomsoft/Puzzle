import unittest
from unittest import TestCase

from Domain.Board.Grid import Grid
from Domain.Puzzles.Norinori.NorinoriSolver import NorinoriSolver


class NorinoriSolverTests(TestCase):
    def test_solution_grid_not_a_square(self):
        grid = Grid([
            [0, 1, 1, 1, 1, 1],
            [0, 2, 2, 1, 1, 1],
            [0, 2, 2, 1, 1, 1],
            [0, 2, 2, 1, 1, 1],
            [0, 2, 2, 1, 1, 1],
        ])
        with self.assertRaises(ValueError) as context:
            NorinoriSolver(grid)
        self.assertEqual("The grid must be square", str(context.exception))

    def test_solution_grid_size_less_than_4(self):
        grid = Grid([
            [0, 0, 0, 1, 1],
            [0, 0, 0, 1, 1],
            [0, 0, 0, 1, 1],
            [0, 0, 0, 1, 1],
            [0, 0, 0, 1, 1],
        ])
        with self.assertRaises(ValueError) as context:
            NorinoriSolver(grid)
        self.assertEqual("The grid must be at least 6x6", str(context.exception))

    def test_solution_color_less_than_columns_number(self):
        grid = Grid([
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
        ])
        with self.assertRaises(ValueError) as context:
            NorinoriSolver(grid)
        self.assertEqual("The grid must have at least 2 regions", str(context.exception))

    def test_solution_none_because_2_by_region(self):
        grid = Grid([
            [0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
        ])
        game_solver = NorinoriSolver(grid)
        solution = game_solver.get_solution()
        self.assertEqual(Grid.empty(), solution)

    def test_solution_none_because_1_isolated(self):
        grid = Grid([
            [1, 1, 3, 0, 0, 0],
            [1, 1, 3, 0, 0, 0],
            [2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
        ])
        game_solver = NorinoriSolver(grid)
        solution = game_solver.get_solution()
        self.assertEqual(Grid.empty(), solution)

    def test_solution(self):
        grid = Grid([
            [0, 0, 1, 1, 2, 1],
            [3, 4, 1, 1, 2, 1],
            [3, 4, 4, 1, 1, 1],
            [3, 4, 4, 4, 7, 7],
            [4, 4, 6, 6, 7, 7],
            [4, 5, 5, 6, 6, 7],
        ])
        expected_solution = Grid([
            [1, 1, 0, 0, 1, 0],
            [0, 0, 1, 0, 1, 0],
            [1, 0, 1, 0, 0, 1],
            [1, 0, 0, 1, 0, 1],
            [0, 0, 0, 1, 0, 0],
            [0, 1, 1, 0, 1, 1]
        ])
        game_solver = NorinoriSolver(grid)
        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

    def test_solution_10x10(self):
        grid = Grid([
            [0, 0, 1, 1, 1, 2, 2, 3, 4, 4],
            [5, 5, 1, 6, 6, 2, 3, 3, 3, 3],
            [5, 5, 7, 6, 6, 2, 2, 8, 8, 9],
            [5, 5, 7, 7, 6, 6, 2, 8, 8, 9],
            [10, 11, 11, 11, 11, 11, 2, 2, 2, 9],
            [10, 10, 10, 11, 11, 12, 12, 13, 13, 9],
            [14, 10, 10, 15, 15, 12, 12, 12, 13, 19],
            [14, 10, 16, 16, 12, 12, 20, 13, 13, 19],
            [14, 14, 16, 16, 12, 12, 20, 20, 20, 18],
            [17, 17, 17, 16, 18, 18, 18, 18, 18, 18],
        ])
        expected_solution = Grid([
            [1, 1, 0, 0, 1, 0, 0, 0, 1, 1],
            [0, 0, 1, 0, 1, 0, 1, 1, 0, 0],
            [1, 0, 1, 0, 0, 0, 0, 0, 1, 1],
            [1, 0, 0, 1, 1, 0, 1, 1, 0, 0],
            [0, 1, 1, 0, 0, 0, 0, 0, 1, 1],
            [1, 0, 0, 0, 0, 0, 1, 1, 0, 0],
            [1, 0, 0, 1, 1, 0, 0, 0, 0, 1],
            [0, 1, 1, 0, 0, 0, 1, 1, 0, 1],
            [1, 0, 0, 0, 0, 1, 0, 0, 1, 0],
            [1, 0, 1, 1, 0, 1, 0, 0, 1, 0]
        ])
        game_solver = NorinoriSolver(grid)
        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

    def test_solution_20x20(self):
        grid = Grid([
            [1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 7, 8, 8, 9, 9],
            [10, 1, 11, 12, 12, 2, 2, 2, 4, 4, 13, 5, 5, 6, 6, 7, 8, 8, 14, 14],
            [10, 10, 11, 12, 15, 15, 2, 4, 4, 13, 13, 16, 5, 5, 6, 6, 8, 14, 14, 14],
            [17, 17, 11, 11, 15, 15, 4, 4, 18, 18, 18, 16, 19, 6, 6, 20, 8, 20, 14, 21],
            [17, 17, 22, 23, 23, 23, 24, 24, 25, 25, 16, 16, 19, 19, 6, 20, 20, 20, 21, 21],
            [22, 22, 22, 22, 26, 26, 26, 24, 25, 25, 25, 27, 27, 27, 27, 20, 28, 28, 21, 29],
            [22, 22, 30, 22, 22, 31, 26, 26, 26, 32, 32, 27, 27, 33, 27, 27, 28, 29, 29, 29],
            [34, 34, 30, 30, 22, 31, 35, 35, 35, 35, 32, 27, 33, 33, 36, 36, 37, 37, 38, 38],
            [39, 39, 30, 40, 31, 31, 41, 41, 35, 42, 32, 43, 43, 33, 36, 36, 37, 37, 37, 38],
            [39, 39, 44, 40, 40, 45, 45, 41, 42, 42, 32, 43, 46, 47, 47, 48, 37, 37, 37, 37],
            [39, 44, 44, 44, 40, 45, 45, 41, 42, 49, 32, 43, 46, 46, 46, 48, 37, 50, 37, 37],
            [51, 44, 44, 44, 52, 52, 49, 49, 49, 49, 53, 53, 53, 53, 46, 48, 48, 50, 54, 54],
            [51, 52, 52, 52, 52, 55, 49, 49, 56, 56, 56, 53, 53, 53, 46, 46, 57, 50, 54, 54],
            [51, 51, 51, 52, 55, 55, 58, 58, 56, 56, 59, 53, 60, 60, 46, 57, 57, 50, 61, 61],
            [62, 62, 63, 64, 64, 63, 58, 58, 65, 66, 59, 67, 60, 67, 50, 50, 50, 50, 68, 68],
            [62, 62, 63, 63, 63, 63, 58, 58, 65, 66, 66, 67, 67, 67, 69, 50, 68, 68, 68, 68],
            [70, 70, 63, 63, 63, 71, 65, 65, 65, 66, 72, 67, 67, 69, 69, 73, 73, 68, 68, 74],
            [75, 75, 75, 63, 63, 71, 76, 76, 66, 66, 72, 72, 67, 69, 69, 69, 77, 68, 74, 74],
            [78, 75, 75, 63, 63, 71, 76, 76, 76, 76, 76, 79, 80, 80, 77, 77, 77, 68, 81, 81],
            [78, 78, 78, 63, 63, 82, 82, 82, 76, 76, 76, 79, 80, 80, 80, 80, 68, 68, 68, 81]
        ])
        expected_solution = Grid([
            [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1],
            [1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0],
            [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1],
            [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1],
            [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0],
            [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
            [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1],
            [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1],
            [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
            [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1],
            [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0],
            [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1],
            [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1],
            [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1],
            [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0],
            [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1],
            [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1],
        ])
        game_solver = NorinoriSolver(grid)
        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)


if __name__ == '__main__':
    unittest.main()
