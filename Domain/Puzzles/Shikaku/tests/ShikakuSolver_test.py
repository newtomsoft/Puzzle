import unittest
from unittest import TestCase

from Domain.Board.Grid import Grid
from Domain.Puzzles.Shikaku.ShikakuSolver import ShikakuSolver

_ = -1


class ShikakuSolverTests(TestCase):
    def test_grid_must_be_at_least_5x5_raises_value_error(self):
        grid = Grid([
            [1, 1, 1, 2],
            [1, 3, 1, 1],
            [1, 3, 3, 4],
            [1, 1, 3, 4],
            [1, 3, 3, 4],
        ])
        with self.assertRaises(ValueError) as context:
            ShikakuSolver(grid)

        self.assertEqual(str(context.exception), "The grid must be at least 5x5")

    def test_grid_numbers_sum_equal_cells_number(self):
        grid = Grid([
            [24, _, _, _, _],
            [_, _, _, _, _],
            [_, _, _, _, _],
            [_, _, _, _, _],
            [_, _, _, _, _],
        ])
        with self.assertRaises(ValueError) as context:
            ShikakuSolver(grid)

        self.assertEqual(str(context.exception), "Sum of numbers must be equal to the number of cells")

    def test_get_solution_1_rectangle(self):
        grid = Grid([
            [_, _, _, _, _],
            [_, _, _, _, _],
            [_, _, _, _, _],
            [_, 25, _, _, _],
            [_, _, _, _, _],
        ])
        expected_grid = Grid([
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
        ])
        game_solver = ShikakuSolver(grid)

        solution = game_solver.get_solution()
        self.assertEqual(expected_grid, solution)

    def test_get_solution_2_rectangles(self):
        grid = Grid([
            [_, _, _, _, _],
            [_, _, _, _, _],
            [15, _, _, _, 10],
            [_, _, _, _, _],
            [_, _, _, _, _],
        ])
        expected_grid = Grid([
            [0, 0, 0, 1, 1],
            [0, 0, 0, 1, 1],
            [0, 0, 0, 1, 1],
            [0, 0, 0, 1, 1],
            [0, 0, 0, 1, 1],
        ])
        game_solver = ShikakuSolver(grid)

        solution = game_solver.get_solution()
        self.assertEqual(expected_grid, solution)

    def test_get_solution_3_rectangles(self):
        grid = Grid([
            [_, _, _, 4, _],
            [_, _, _, _, _],
            [15, _, _, _, 6],
            [_, _, _, _, _],
            [_, _, _, _, _],
        ])
        expected_grid = Grid([
            [1, 1, 1, 0, 0],
            [1, 1, 1, 0, 0],
            [1, 1, 1, 2, 2],
            [1, 1, 1, 2, 2],
            [1, 1, 1, 2, 2]
        ])
        game_solver = ShikakuSolver(grid)
        solution = game_solver.get_solution()
        self.assertEqual(expected_grid, solution)

    def test_get_solution_5x5(self):
        grid = Grid([
            [_, _, 4, _, _],
            [_, _, 3, _, _],
            [3, 2, _, _, _],
            [4, _, 4, _, 2],
            [_, _, 3, _, _]
        ])
        expected_grid = Grid([
            [2, 0, 0, 0, 0],
            [2, 3, 1, 1, 1],
            [2, 3, 5, 5, 6],
            [4, 4, 5, 5, 6],
            [4, 4, 7, 7, 7]
        ])
        game_solver = ShikakuSolver(grid)
        solution = game_solver.get_solution()
        self.assertEqual(expected_grid, solution)

    def test_get_solution_7x7(self):
        grid = Grid([
            [_, 4, _, _, _, _, _],
            [_, _, _, _, 6, 2, _],
            [_, _, _, _, _, 6, 6],
            [_, 2, _, _, 4, _, _],
            [_, 6, _, 3, _, _, _],
            [3, _, _, 3, _, _, _],
            [_, _, _, 2, _, 2, _]
        ])
        expected_grid = Grid([
            [0, 0, 1, 1, 1, 2, 4],
            [0, 0, 1, 1, 1, 2, 4],
            [3, 3, 3, 3, 3, 3, 4],
            [5, 5, 6, 6, 6, 6, 4],
            [9, 7, 7, 8, 8, 8, 4],
            [9, 7, 7, 10, 10, 10, 4],
            [9, 7, 7, 11, 11, 12, 12]
        ])
        game_solver = ShikakuSolver(grid)
        solution = game_solver.get_solution()
        self.assertEqual(expected_grid, solution)

    def test_get_solution_10x10(self):
        grid = Grid([
            [_, 6, _, _, _, _, _, _, _, _],
            [_, _, _, _, 2, _, 8, _, _, _],
            [_, _, 2, 2, 2, _, _, 2, _, _],
            [_, _, _, 12, _, _, _, _, 2, 2],
            [10, _, _, _, _, _, _, _, _, _],
            [_, _, _, 4, _, _, 2, _, _, _],
            [_, 10, _, _, _, _, 4, _, _, _],
            [_, _, _, _, _, _, _, _, _, _],
            [_, _, 3, _, 2, _, 2, 3, _, 10],
            [2, _, _, _, _, 4, _, _, 4, _]
        ])
        expected_grid = Grid([
            [0, 0, 0, 0, 0, 0, 2, 2, 2, 2],
            [10, 10, 3, 4, 1, 1, 2, 2, 2, 2],
            [10, 10, 3, 4, 5, 5, 6, 6, 8, 9],
            [10, 10, 7, 7, 7, 7, 7, 7, 8, 9],
            [10, 10, 7, 7, 7, 7, 7, 7, 19, 19],
            [10, 10, 11, 11, 11, 11, 12, 12, 19, 19],
            [13, 13, 13, 13, 13, 14, 14, 18, 19, 19],
            [13, 13, 13, 13, 13, 14, 14, 18, 19, 19],
            [15, 15, 15, 16, 16, 17, 17, 18, 19, 19],
            [20, 20, 21, 21, 21, 21, 22, 22, 22, 22]
        ])
        game_solver = ShikakuSolver(grid)
        solution = game_solver.get_solution()
        self.assertEqual(expected_grid, solution)

    def test_get_solution_15x15(self):
        grid = Grid([
            [_, _, _, _, 22, _, _, _, _, _, _, _, _, 2, _],
            [2, 2, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, 3, _, _, 3, 6, _],
            [_, _, _, _, 27, _, _, _, _, _, _, 6, _, _, _],
            [_, _, 18, _, _, _, _, _, _, _, _, _, _, _, 2],
            [2, _, _, _, _, _, _, _, 2, _, _, _, _, _, _],
            [7, _, _, _, _, _, _, _, _, _, _, _, _, _, 2],
            [_, _, _, 30, _, _, _, _, _, _, _, 20, _, _, _],
            [_, _, _, _, _, _, _, _, 3, _, _, _, _, 6, 7],
            [_, _, _, _, _, _, _, _, _, 3, _, _, _, _, _],
            [_, _, _, 2, _, _, _, _, _, _, _, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, 28, _, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [_, _, 3, 2, _, _, _, _, _, _, _, _, _, 15, _]
        ])
        expected_grid = Grid([
            [2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
            [2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6],
            [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 8, 8, 5, 6, 6],
            [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 8, 8, 5, 6, 6],
            [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 8, 8, 5, 18, 10],
            [11, 9, 9, 15, 15, 15, 15, 15, 12, 16, 16, 16, 16, 18, 10],
            [11, 9, 9, 15, 15, 15, 15, 15, 12, 16, 16, 16, 16, 18, 14],
            [13, 9, 9, 15, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 14],
            [13, 9, 9, 15, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 19],
            [13, 9, 9, 15, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 19],
            [13, 9, 9, 15, 15, 15, 15, 15, 20, 20, 20, 25, 25, 25, 19],
            [13, 9, 9, 21, 22, 22, 22, 22, 22, 22, 22, 25, 25, 25, 19],
            [13, 9, 9, 21, 22, 22, 22, 22, 22, 22, 22, 25, 25, 25, 19],
            [13, 9, 9, 24, 22, 22, 22, 22, 22, 22, 22, 25, 25, 25, 19],
            [23, 23, 23, 24, 22, 22, 22, 22, 22, 22, 22, 25, 25, 25, 19]
        ])
        game_solver = ShikakuSolver(grid)
        solution = game_solver.get_solution()
        self.assertEqual(expected_grid, solution)

    def test_get_solution_30x30(self):
        grid = Grid([
            [_, 3, _, _, 13, _, _, _, _, _, _, _, _, _, _, _, 3, _, _, _, _, _, _, _, _, _, _, 5, _, _],
            [_, _, _, _, _, _, 2, _, 2, _, 2, _, _, _, 4, 2, _, 9, _, _, _, _, _, _, _, _, _, _, _, 3],
            [_, _, _, _, _, _, _, _, _, _, _, _, _, 8, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2, _],
            [_, _, _, _, _, _, _, 2, _, _, _, 11, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2, _, _, _, _, _, 6, _, _, _, _],
            [_, _, _, _, _, 48, _, _, _, _, _, _, _, _, _, _, 8, 24, _, _, _, _, _, _, _, _, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, _, _, _, _, _, 117, _, _, _, _, 5, 20, _, _, _, _, _, _, 24, _, _],
            [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 13],
            [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 8, _, _, 8, _],
            [_, _, _, _, _, 2, _, _, _, _, _, _, _, _, _, 4, 11, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [_, 8, _, _, _, 2, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [_, 2, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 4, _, 2, _, _, _, _, _, _, 4, _],
            [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2, 2, _, _, _, _, _, _, _, _, _],
            [10, _, _, _, 12, _, _, _, _, _, _, _, _, _, _, 3, _, _, _, _, _, _, 45, _, _, _, 2, _, _, _],
            [_, _, _, 2, 4, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2, _, _, _],
            [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 4, _, _, _, 2, _, _],
            [_, _, 3, _, _, 3, _, _, _, _, _, _, _, _, _, 2, _, _, _, _, _, _, _, 8, _, _, _, 2, _, _],
            [_, _, _, 13, _, _, _, _, _, _, _, _, _, _, 3, _, _, _, 4, _, 8, 6, _, _, _, _, 7, _, 10, 5],
            [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3, _, _, _, _, 5, _, _, _, _, _, _],
            [_, _, _, _, _, _, _, _, 24, _, _, _, _, _, _, 4, _, _, _, _, _, _, _, _, _, 2, _, _, _, _],
            [_, _, _, _, _, 8, _, _, _, _, 2, _, 9, _, _, _, _, _, _, _, _, _, _, 27, _, _, _, _, _, _],
            [3, 3, _, _, 13, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [2, _, _, 14, _, _, _, _, _, _, 4, _, 6, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3, _],
            [_, _, 5, _, _, _, _, _, _, _, _, _, _, _, 15, _, _, _, _, _, _, _, _, _, _, _, 33, _, _, 3],
            [_, _, _, 5, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 4, _, _, _, _, _, _, _, _, 18, _, _],
            [_, 3, _, 2, _, _, _, _, _, _, _, _, _, 27, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [2, _, _, 2, _, _, _, _, _, _, _, _, 10, _, 3, _, _, _, _, _, _, _, 25, _, _, _, _, _, _, _],
            [_, _, _, _, _, 26, _, _, _, _, _, _, _, _, _, _, 4, _, _, _, _, _, _, _, _, 5, _, _, _, 2],
            [4, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 6, _, _, _, _, _, _, _, 2, _, _, 3, _]
        ])
        expected_grid = Grid([
            [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 9, 9, 9, 22, 22, 41, 41, 41, 3, 3, 3, 3, 3],
            [17, 17, 17, 17, 17, 17, 4, 5, 5, 6, 6, 7, 7, 7, 7, 8, 2, 9, 9, 9, 22, 22, 41, 41, 41, 16, 23, 23, 12, 10],
            [17, 17, 17, 17, 17, 17, 4, 11, 11, 11, 11, 11, 11, 11, 11, 8, 2, 9, 9, 9, 22, 22, 41, 41, 41, 16, 23, 23, 12, 10],
            [17, 17, 17, 17, 17, 17, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 22, 22, 41, 41, 41, 16, 23, 23, 26, 10],
            [17, 17, 17, 17, 17, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 18, 19, 19, 15, 22, 22, 41, 41, 41, 16, 23, 23, 26, 24],
            [17, 17, 17, 17, 17, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 18, 19, 19, 21, 22, 22, 41, 41, 41, 16, 23, 23, 26, 24],
            [17, 17, 17, 17, 17, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 18, 19, 19, 21, 22, 22, 41, 41, 41, 16, 23, 23, 26, 24],
            [17, 17, 17, 17, 17, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 18, 19, 19, 21, 22, 22, 41, 41, 41, 25, 23, 23, 26, 24],
            [17, 17, 17, 17, 17, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 28, 29, 19, 19, 21, 22, 22, 41, 41, 41, 25, 23, 23, 26, 24],
            [30, 30, 30, 30, 27, 27, 20, 20, 20, 20, 20, 20, 20, 20, 20, 28, 29, 19, 19, 21, 22, 22, 41, 41, 41, 25, 23, 23, 26, 24],
            [30, 30, 30, 30, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20, 28, 29, 19, 19, 33, 33, 34, 41, 41, 41, 25, 23, 23, 26, 24],
            [32, 32, 39, 39, 39, 39, 20, 20, 20, 20, 20, 20, 20, 20, 20, 28, 29, 19, 19, 33, 33, 34, 41, 41, 41, 25, 23, 23, 35, 24],
            [38, 38, 39, 39, 39, 39, 20, 20, 20, 20, 20, 20, 20, 20, 20, 40, 29, 19, 19, 36, 37, 57, 41, 41, 41, 25, 23, 23, 35, 24],
            [38, 38, 39, 39, 39, 39, 20, 20, 20, 20, 20, 20, 20, 20, 20, 40, 29, 19, 19, 36, 37, 57, 41, 41, 41, 25, 42, 42, 35, 24],
            [38, 38, 48, 43, 44, 44, 20, 20, 20, 20, 20, 20, 20, 20, 20, 40, 29, 19, 19, 56, 56, 57, 41, 41, 41, 25, 45, 45, 35, 24],
            [38, 38, 48, 43, 44, 44, 20, 20, 20, 20, 20, 20, 20, 20, 20, 50, 29, 19, 19, 56, 56, 57, 46, 46, 46, 46, 58, 47, 47, 24],
            [38, 38, 48, 49, 49, 49, 20, 20, 20, 20, 20, 20, 20, 20, 20, 50, 29, 55, 55, 56, 56, 57, 51, 51, 51, 51, 58, 52, 52, 24],
            [53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 29, 55, 55, 56, 56, 57, 51, 51, 51, 51, 58, 59, 59, 60],
            [63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 68, 68, 68, 64, 29, 61, 61, 61, 62, 62, 62, 62, 62, 65, 58, 59, 59, 60],
            [63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 68, 68, 68, 64, 69, 69, 69, 69, 69, 69, 69, 69, 69, 65, 58, 59, 59, 60],
            [70, 71, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 68, 68, 68, 64, 69, 69, 69, 69, 69, 69, 69, 69, 69, 73, 58, 59, 59, 60],
            [70, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 64, 69, 69, 69, 69, 69, 69, 69, 69, 69, 73, 58, 59, 59, 60],
            [70, 71, 75, 75, 75, 75, 75, 75, 75, 76, 76, 77, 77, 77, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 78, 82],
            [74, 74, 75, 75, 75, 75, 75, 75, 75, 76, 76, 77, 77, 77, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 78, 82],
            [79, 79, 79, 79, 79, 88, 88, 88, 88, 88, 88, 88, 88, 88, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 78, 82],
            [83, 83, 83, 83, 83, 88, 88, 88, 88, 88, 88, 88, 88, 88, 80, 80, 80, 84, 84, 93, 93, 93, 93, 93, 85, 85, 85, 85, 85, 85],
            [86, 86, 86, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 80, 80, 80, 84, 84, 93, 93, 93, 93, 93, 85, 85, 85, 85, 85, 85],
            [89, 89, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 99, 99, 93, 93, 93, 93, 93, 85, 85, 85, 85, 85, 85],
            [98, 98, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 95, 99, 99, 93, 93, 93, 93, 93, 96, 96, 96, 96, 96, 97],
            [98, 98, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 95, 99, 99, 93, 93, 93, 93, 93, 100, 100, 101, 101, 101, 97],
        ])
        game_solver = ShikakuSolver(grid)
        solution = game_solver.get_solution()
        self.assertEqual(expected_grid, solution)

    def test_get_solution_50x50(self):
        grid = Grid([
            [5, 4, _, 2, _, _, 3, _, _, _, _, _, _, _, _, _, 5, _, _, _, _, 16, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3, _],
            [-1, _, _, _, _, _, 4, _, _, _, _, 4, _, _, _, _, _, _, _, _, _, _, _, 5, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, 2, _, _, 9, _, 3, _, _, 9, 6, _, _, 2, 28, _, _, _, 4, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, 4, _, _, _, _, 4, _, _, 3, _, _, _, _, 21, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, 2, _, _, _, _, _, _, 6, _, _, _, _, _, _, 3, _, _, _, 10, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, 6, _, _, _, _, 2, _, _, 2, 2, _, _, 2, _, _, 6, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 70, _, _, _, _, _, _, _],
            [-1, _, 4, _, _, _, _, _, _, 16, _, _, _, _, 2, _, _, _, _, 4, _, _, _, _, _, _, _, 12, _, 2, _, _, _, _, _, 6, _, _, _, 2],
            [-1, _, _, _, _, _, _, _, _, _, _, _, 28, _, _, _, 5, _, 3, _, _, 2, _, _, _, _, _, _, _, _, _, 4, _, _, _, 4, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2, _, _, _, _, _, _, _, 2, _, _, 3, _, _, 3, 3, _, _, _],
            [7, 8, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 6, _, _, _, 2, _, _, 8, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 6, _, 2, _, 2, _, _, _, _, _, 3, _, _, _, _, 2, _, _],
            [-1, _, 2, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 6, _, _, _, _, _, _, 37, _, _, _, 12, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 9, _, _, _, _, _, _, _, _, _, 10, 4, _, _, _, _, _, _],
            [-1, 15, _, _, _, _, _, 50, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 6],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 297, _, _, _, _, _, _, _, _, _, _, _, _, 40, _],
            [-1, _, _, _, _, _, _, _, _, _, _, 20, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, 2, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 4, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, 18, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 34, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, 22, _, _, _, _, _, _, _, 3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 24, _, _, _, _, _, _, _],
            [-1, _, 6, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, 3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 4, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 273, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [12, _, 4, 25, _, _, _, _, _, 2, _, 3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 11, _, _, _],
            [-1, _, 44, _, _, _, _, _, _, _, 4, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, 4, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 24, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, 2, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, 4, _, _, _, 2, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 6, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, 14, _, _, _, _, _, _, _, 10, _, _, _, _, _, _, _, _, _, _, _, 2, _, _, _, _, 48, _, _],
            [-1, _, _, _, _, _, _, _, _, _, 30, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [14, _, _, _, _, _, _, 4, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 29, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 18, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, 4, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 8, _, _, _, _, 2, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, 2, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, 4, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 13, _, _, _, 3, _, _, _],
            [-1, _, _, _, _, _, _, 2, _, _, _, 4, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 6, _, _, _, _, _, _, _, _, _, _, 3, _, _, _, _, 3, _, _, _],
            [-1, 6, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3, _, _, _, _],
            [-1, _, _, _, _, 144, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2, _, _, _, _, 2, _, _, _],
            [-1, _, _, _, _, _, _, _, 36, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 8, _, 3, _, _, 2, _, _, _, _, 4, _, 4],
            [-1, 3, _, _, _, _, _, _, _, _, _, _, _, _, 3, _, _, _, 4, _, 3, _, 3, _, _, _, _, _, _, _, _, 9, _, 3, _, _, _, 2, _, _],
            [4, _, _, _, _, _, _, 2, 2, _, _, _, _, 6, _, 24, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [-1, 3, _, _, _, _, _, _, _, _, 2, _, _, 16, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 12, _, _, _, 2]
        ])
        expected_grid = Grid([
            [0, 1, 26, 2, 2, 3, 3, 3, 11, 11, 11, 8, 12, 13, 13, 13, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6],
            [0, 1, 26, 7, 7, 7, 7, 10, 11, 11, 11, 8, 12, 13, 13, 13, 14, 14, 14, 15, 16, 9, 9, 9, 9, 9, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],
            [0, 1, 26, 89, 124, 124, 124, 10, 11, 11, 11, 8, 12, 13, 13, 13, 14, 14, 14, 15, 16, 17, 17, 17, 17, 25, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],
            [0, 1, 26, 89, 124, 124, 124, 18, 18, 18, 18, 8, 41, 19, 19, 19, 19, 20, 20, 20, 16, 24, 21, 21, 21, 25, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],
            [0, 53, 26, 89, 124, 124, 124, 22, 22, 34, 28, 29, 41, 23, 23, 23, 23, 23, 23, 36, 16, 24, 21, 21, 21, 25, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],
            [52, 53, 26, 89, 124, 124, 124, 27, 27, 34, 28, 29, 41, 30, 30, 31, 31, 31, 43, 36, 16, 24, 21, 21, 21, 25, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],
            [52, 53, 33, 89, 124, 124, 124, 70, 70, 34, 74, 74, 41, 35, 35, 31, 31, 31, 43, 36, 16, 44, 21, 21, 21, 25, 37, 37, 37, 38, 38, 39, 39, 39, 39, 39, 39, 56, 56, 40],
            [52, 53, 33, 89, 124, 124, 124, 70, 70, 34, 74, 74, 41, 42, 42, 42, 42, 42, 43, 36, 16, 44, 21, 21, 21, 25, 37, 37, 37, 45, 45, 45, 45, 46, 46, 46, 46, 56, 56, 40],
            [52, 53, 33, 89, 124, 124, 124, 70, 70, 34, 74, 74, 41, 85, 85, 85, 85, 85, 85, 85, 16, 47, 21, 21, 21, 25, 37, 37, 37, 48, 49, 49, 49, 50, 50, 50, 51, 56, 56, 71],
            [52, 53, 33, 89, 124, 124, 124, 70, 70, 34, 74, 74, 41, 85, 85, 85, 85, 85, 85, 85, 16, 47, 21, 21, 21, 25, 37, 37, 37, 48, 54, 54, 60, 68, 64, 55, 51, 56, 56, 71],
            [52, 53, 62, 89, 124, 124, 124, 70, 70, 34, 74, 74, 41, 85, 85, 85, 85, 85, 85, 85, 16, 57, 57, 57, 58, 25, 59, 63, 63, 63, 54, 54, 60, 68, 64, 55, 51, 61, 61, 71],
            [52, 53, 62, 89, 124, 124, 124, 70, 70, 34, 74, 74, 41, 85, 85, 85, 85, 85, 85, 85, 16, 57, 57, 57, 58, 25, 59, 63, 63, 63, 54, 54, 60, 68, 64, 65, 65, 65, 65, 71],
            [69, 69, 69, 89, 124, 124, 124, 70, 70, 34, 74, 74, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 68, 64, 65, 65, 65, 65, 71],
            [69, 69, 69, 89, 124, 124, 124, 70, 70, 34, 74, 74, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 67, 67, 76, 64, 65, 65, 65, 65, 71],
            [69, 69, 69, 89, 124, 124, 124, 70, 70, 34, 74, 74, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 67, 67, 76, 64, 73, 73, 73, 73, 73],
            [69, 69, 69, 89, 124, 124, 124, 70, 70, 34, 74, 74, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 67, 67, 76, 64, 73, 73, 73, 73, 73],
            [69, 69, 69, 89, 124, 124, 124, 70, 70, 34, 75, 75, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 67, 67, 76, 64, 73, 73, 73, 73, 73],
            [87, 79, 82, 89, 124, 124, 124, 70, 70, 34, 77, 77, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 81, 81, 108, 64, 73, 73, 73, 73, 73],
            [87, 79, 82, 89, 124, 124, 124, 70, 70, 34, 77, 77, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 81, 81, 108, 64, 73, 73, 73, 73, 73],
            [87, 79, 82, 89, 124, 124, 124, 70, 70, 34, 77, 77, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 81, 81, 108, 64, 73, 73, 73, 73, 73],
            [87, 79, 82, 89, 124, 124, 124, 70, 70, 80, 77, 77, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 81, 81, 108, 64, 73, 73, 73, 73, 73],
            [87, 79, 82, 89, 124, 124, 124, 70, 70, 80, 77, 77, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 81, 81, 108, 64, 73, 73, 73, 73, 73],
            [87, 79, 82, 89, 124, 124, 124, 70, 70, 80, 77, 77, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 81, 81, 108, 64, 84, 84, 96, 96, 96],
            [87, 79, 88, 89, 124, 124, 124, 70, 70, 83, 77, 77, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 81, 81, 108, 64, 84, 84, 96, 96, 96],
            [87, 79, 88, 89, 124, 124, 124, 70, 70, 83, 77, 77, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 81, 81, 108, 64, 86, 86, 96, 96, 96],
            [87, 79, 88, 89, 124, 124, 124, 70, 70, 83, 77, 77, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 81, 81, 108, 64, 109, 92, 96, 96, 96],
            [87, 79, 88, 89, 124, 124, 124, 70, 70, 90, 90, 91, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 81, 81, 108, 64, 109, 92, 96, 96, 96],
            [87, 79, 93, 93, 124, 124, 124, 70, 70, 94, 94, 91, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 81, 81, 108, 64, 109, 92, 96, 96, 96],
            [87, 79, 93, 93, 124, 124, 124, 70, 70, 94, 94, 91, 41, 85, 85, 85, 85, 85, 85, 85, 16, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 81, 81, 108, 64, 109, 92, 96, 96, 96],
            [106, 79, 93, 93, 124, 124, 124, 70, 70, 95, 95, 97, 41, 85, 85, 85, 85, 85, 85, 85, 102, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 100, 100, 108, 64, 109, 92, 96, 96, 96],
            [106, 79, 93, 93, 124, 124, 124, 70, 70, 95, 95, 97, 41, 85, 85, 85, 85, 85, 85, 85, 102, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 100, 100, 108, 64, 109, 92, 104, 104, 104],
            [106, 79, 93, 93, 124, 124, 124, 98, 98, 98, 98, 99, 99, 85, 85, 85, 85, 85, 85, 85, 102, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 100, 100, 108, 64, 109, 92, 104, 104, 104],
            [106, 79, 93, 93, 124, 124, 124, 107, 105, 105, 105, 101, 101, 85, 85, 85, 85, 85, 85, 85, 102, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 103, 103, 108, 64, 109, 92, 104, 104, 104],
            [106, 79, 93, 93, 124, 124, 124, 107, 105, 105, 105, 101, 101, 85, 85, 85, 85, 85, 85, 85, 102, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 111, 115, 108, 64, 109, 92, 104, 104, 104],
            [106, 79, 93, 93, 124, 124, 124, 107, 105, 105, 105, 101, 101, 85, 85, 85, 85, 85, 85, 85, 102, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 111, 115, 108, 64, 109, 92, 104, 104, 104],
            [106, 79, 93, 93, 124, 124, 124, 107, 105, 105, 105, 101, 101, 85, 85, 85, 85, 85, 85, 85, 102, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 111, 115, 108, 64, 109, 92, 104, 104, 104],
            [106, 79, 93, 93, 124, 124, 124, 110, 105, 105, 105, 101, 101, 85, 85, 85, 85, 85, 85, 85, 102, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 111, 115, 108, 64, 109, 112, 104, 104, 104],
            [106, 79, 93, 93, 124, 124, 124, 110, 105, 105, 105, 101, 101, 85, 85, 85, 85, 85, 85, 85, 102, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 111, 115, 108, 64, 109, 112, 104, 104, 104],
            [106, 79, 93, 93, 124, 124, 124, 110, 105, 105, 105, 101, 101, 85, 85, 85, 85, 85, 85, 85, 102, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 111, 115, 108, 64, 109, 116, 104, 104, 104],
            [106, 114, 93, 93, 124, 124, 124, 110, 105, 105, 105, 113, 113, 85, 85, 85, 85, 85, 85, 85, 119, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 111, 115, 108, 64, 109, 116, 104, 104, 104],
            [106, 114, 93, 93, 124, 124, 124, 117, 105, 105, 105, 118, 118, 85, 85, 85, 85, 85, 85, 85, 119, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 111, 115, 108, 64, 109, 116, 104, 104, 104],
            [106, 114, 93, 93, 124, 124, 124, 117, 105, 105, 105, 118, 118, 85, 85, 85, 85, 85, 85, 85, 119, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 120, 115, 108, 64, 109, 121, 104, 104, 104],
            [106, 114, 93, 93, 124, 124, 124, 127, 127, 127, 127, 127, 127, 85, 85, 85, 85, 85, 85, 85, 119, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 120, 115, 108, 64, 109, 121, 104, 104, 104],
            [122, 122, 93, 93, 124, 124, 124, 127, 127, 127, 127, 127, 127, 85, 85, 85, 85, 85, 85, 85, 119, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 120, 115, 108, 64, 123, 121, 104, 104, 104],
            [122, 122, 93, 93, 124, 124, 124, 127, 127, 127, 127, 127, 127, 85, 85, 85, 85, 85, 85, 85, 119, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 125, 115, 108, 64, 123, 126, 104, 104, 104],
            [122, 122, 93, 93, 124, 124, 124, 127, 127, 127, 127, 127, 127, 85, 85, 85, 85, 85, 85, 85, 136, 78, 72, 72, 72, 72, 72, 72, 72, 72, 72, 125, 115, 108, 64, 123, 126, 104, 104, 104],
            [141, 133, 93, 93, 124, 124, 124, 127, 127, 127, 127, 127, 127, 85, 85, 85, 85, 85, 85, 85, 136, 128, 128, 128, 128, 128, 128, 128, 128, 129, 129, 129, 130, 130, 131, 131, 131, 131, 132, 132],
            [141, 133, 93, 93, 124, 124, 124, 127, 127, 127, 127, 127, 127, 134, 134, 134, 135, 135, 135, 135, 136, 137, 137, 137, 138, 138, 138, 138, 138, 138, 138, 138, 138, 139, 139, 139, 140, 140, 132, 132],
            [141, 133, 93, 93, 124, 124, 124, 142, 143, 144, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 150],
            [141, 146, 146, 146, 124, 124, 124, 142, 143, 147, 147, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 150],
        ])
        game_solver = ShikakuSolver(grid)
        solution = game_solver.get_solution()
        self.assertEqual(expected_grid, solution)


if __name__ == '__main__':
    unittest.main()
