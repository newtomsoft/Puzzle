import unittest
from unittest import TestCase

from Domain.Board.Grid import Grid
from Domain.Puzzles.Kakuro.KakuroSolver import KakuroSolver

_ = 0


class KakuroSolverTests(TestCase):
    def test_solution_grid_size_less_than_3(self):
        grid = Grid([
            [_, _],
            [_, _],
        ])
        with self.assertRaises(ValueError) as context:
            KakuroSolver(grid)

        self.assertEqual("The grid must be at least 3x3", str(context.exception))

    def test_solution_impossible_sum_19_with_2_numbers(self):
        grid = Grid([
            [[_, _], [_, 19], [_, 19]],
            [[19, _], _, _],
            [[19, _], _, _],
        ])
        game_solver = KakuroSolver(grid)

        solution = game_solver.get_solution()
        self.assertEqual(Grid.empty(), solution)

    def test_solution_impossible_single_number(self):
        grid = Grid([
            [[_, _], [_, 2], [_, 5]],
            [[3, _], _, _],
            [[4, _], _, _],
        ])
        game_solver = KakuroSolver(grid)

        solution = game_solver.get_solution()
        self.assertEqual(Grid.empty(), solution)

    def test_solution_minimal_grid(self):
        grid = Grid([
            [[_, _], [_, 4], [_, 6]],
            [[3, _], _, _],
            [[7, _], _, _],
        ])
        expected_solution = Grid([
            [_, _, _],
            [_, 1, 2],
            [_, 3, 4],
        ])
        game_solver = KakuroSolver(grid)

        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

    def test_solution_(self):
        grid = Grid([
            [[_, _], [_, 4], [_, 6], [_, _], [_, 6], [_, 4]],
            [[3, _], _, _, [7, _], _, _],
            [[7, _], _, _, [3, _], _, _],
            [[_, _], [_, 4], [_, 6], [_, _], [_, 6], [_, 4]],
            [[3, _], _, _, [7, _], _, _],
            [[7, _], _, _, [3, _], _, _],
        ])
        expected_solution = Grid([
            [_, _, _, _, _, _],
            [_, 1, 2, _, 4, 3],
            [_, 3, 4, _, 2, 1],
            [_, _, _, _, _, _],
            [_, 1, 2, _, 4, 3],
            [_, 3, 4, _, 2, 1],
        ])
        game_solver = KakuroSolver(grid)

        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

    def test_solution_2(self):
        grid = Grid([
            [[_, _], [_, 4], [_, 6], [_, _], [_, _], [_, 6], [_, 4]],
            [[3, _], _, _, [_, _], [7, _], _, _],
            [[7, _], _, _, [_, _], [3, _], _, _],
            [[_, _], [_, 4], [_, 6], [_, _], [_, _], [_, 6], [_, 4]],
            [[3, _], _, _, [_, _], [7, _], _, _],
            [[7, _], _, _, [_, _], [3, _], _, _],
        ])
        expected_solution = Grid([
            [_, _, _, _, _, _, _],
            [_, 1, 2, _, _, 4, 3],
            [_, 3, 4, _, _, 2, 1],
            [_, _, _, _, _, _, _],
            [_, 1, 2, _, _, 4, 3],
            [_, 3, 4, _, _, 2, 1],
        ])
        game_solver = KakuroSolver(grid)

        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

    def test_solution_9x9(self):
        grid = Grid([
            [[_, _], [_, _], [_, 16], [_, 4], [_, _], [_, 6], [_, 4], [_, 15], [_, _], [_, _], [_, 6], [_, 7]],
            [[_, _], [7, 7], _, _, [9, _], _, _, _, [_, _], [4, 16], _, _],
            [[7, _], _, _, _, [7, 5], _, _, _, [6, 3], _, _, _],
            [[3, _], _, _, [4, 16], _, _, [16, 8], _, _, _, _, _],
            [[10, _], _, _, _, _, [10, 15], _, _, _, _, [_, 15], [_, _]],
            [[_, _], [10, _], _, _, [6, 3], _, _, _, [5, 4], _, _, [_, 7]],
            [[_, _], [_, 6], [10, 7], _, _, _, _, [12, 7], _, _, _, _],
            [[16, _], _, _, _, _, _, [4, 3], _, _, [4, 4], _, _],
            [[7, _], _, _, _, [8, _], _, _, _, [6, _], _, _, _],
            [[3, _], _, _, [_, _], [7, _], _, _, _, [3, _], _, _, [_, _]]
        ])
        expected_solution = Grid([
            [_, _, _, _, _, _, _, _, _, _, _, _],
            [_, _, 4, 3, _, 1, 3, 5, _, _, 3, 1],
            [_, 4, 2, 1, _, 2, 1, 4, _, 3, 1, 2],
            [_, 2, 1, _, 1, 3, _, 3, 1, 6, 2, 4],
            [_, 1, 3, 2, 4, _, 3, 1, 2, 4, _, _],
            [_, _, 6, 4, _, 3, 1, 2, _, 1, 4, _],
            [_, _, _, 3, 1, 2, 4, _, 1, 2, 5, 4],
            [_, 3, 1, 6, 2, 4, _, 1, 3, _, 3, 1],
            [_, 2, 4, 1, _, 5, 1, 2, _, 3, 1, 2],
            [_, 1, 2, _, _, 1, 2, 4, _, 1, 2, _]
        ])
        game_solver = KakuroSolver(grid)

        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)

    def test_solution_30x30(self):
        grid = Grid([
            [[_, _], [_, 16], [_, 45], [_, _], [_, 12], [_, 16], [_, _], [_, 16], [_, 4], [_, 3], [_, _], [_, 22], [_, 11], [_, _], [_, 5], [_, 21], [_, _], [_, 8], [_, 6], [_, _], [_, 16], [_, 13], [_, _], [_, 12], [_, 16], [_, _], [_, _], [_, 15], [_, 4], [_, _], [_, _]],
            [[16, _], _, _, [4, _], _, _, [13, 9], _, _, _, [10, 7], _, _, [4, _], _, _, [4, 20], _, _, [14, _], _, _, [13, 4], _, _, [_, _], [8, _], _, _, [_, 11], [_, 26]],
            [[15, _], _, _, [45, 11], _, _, _, _, _, _, _, _, _, [21, 3], _, _, _, _, _, [23, 13], _, _, _, _, _, [_, 19], [20, 5], _, _, _, _],
            [[_, _], [4, _], _, _, [11, _], _, _, [_, 14], [_, 5], [12, 7], _, _, _, _, [11, 9], _, _, [9, _], _, _, [3, 25], _, _, [9, 4], _, _, _, [_, _], [14, _], _, _],
            [[_, _], [14, 4], _, _, [16, 17], _, _, _, _, _, [_, 13], [_, _], [24, _], _, _, _, _, [_, 12], [6, _], _, _, [_, 15], [16, _], _, _, _, _, [_, _], [11, 8], _, _],
            [[3, _], _, _, [6, 12], _, _, [12, 11], _, _, _, _, [_, 6], [_, 7], [15, 11], _, _, _, _, [16, 15], _, _, _, [7, 13], _, _, _, [_, 3], [8, 7], _, _, _],
            [[13, _], _, _, _, _, [3, _], _, _, [_, _], [12, 26], _, _, _, _, [_, _], [_, _], [4, _], _, _, [22, 21], _, _, _, [_, 4], [10, _], _, _, _, _, [_, 45], [_, 14]],
            [[_, _], [17, 11], _, _, _, [16, 24], _, _, [16, _], _, _, _, _, _, [_, 11], [_, 3], [_, 12], [15, _], _, _, _, [6, _], _, _, [_, 7], [5, 3], _, _, [17, 3], _, _],
            [[7, _], _, _, [16, _], _, _, [_, 11], [_, _], [12, 17], _, _, _, [_, _], [10, _], _, _, _, [13, _], _, _, [_, _], [_, 3], [8, 7], _, _, _, [12, _], _, _, _, _],
            [[16, _], _, _, [_, 3], [10, 11], _, _, [15, 17], _, _, [_, _], [_, _], [_, _], [8, 5], _, _, _, [16, 14], _, _, [3, 8], _, _, [5, 12], _, _, [_, 15], [10, 12], _, _, _],
            [[_, _], [_, _], [41, 15], _, _, _, _, _, _, _, [_, 12], [_, _], [4, 5], _, _, [16, _], _, _, [_, 13], [14, 8], _, _, _, _, [_, _], [17, _], _, _, [3, 4], _, _],
            [[_, _], [9, 23], _, _, _, [9, 28], _, _, [13, _], _, _, [6, 3], _, _, [_, _], [_, 12], [18, 4], _, _, _, _, [6, _], _, _, [_, 29], [15, 14], _, _, _, _, [_, _]],
            [[17, _], _, _, [_, _], [12, 16], _, _, [_, 11], [_, 18], [7, _], _, _, _, [_, 10], [12, 16], _, _, [7, _], _, _, _, [_, 23], [_, 30], [13, _], _, _, [_, 5], [6, _], _, _, [_, 6]],
            [[10, _], _, _, [16, _], _, _, [6, 4], _, _, [3, 18], _, _, [10, 10], _, _, _, _, [4, 27], _, _, [16, _], _, _, [10, 23], _, _, _, [_, _], [5, _], _, _],
            [[8, _], _, _, [27, 16], _, _, _, _, _, _, [_, _], [12, 17], _, _, _, [_, 3], [13, 13], _, _, [_, _], [35, 17], _, _, _, _, _, _, [_, _], [8, 15], _, _],
            [[_, _], [_, _], [14, 45], _, _, _, _, [6, 14], _, _, [16, 11], _, _, [10, _], _, _, _, _, [_, _], [25, 9], _, _, _, _, _, [_, 4], [_, 28], [15, 24], _, _, [_, _]],
            [[_, _], [17, 4], _, _, [_, _], [_, 16], [21, 8], _, _, _, _, _, [_, _], [22, 29], _, _, _, _, [16, 16], _, _, [17, _], _, _, [20, 3], _, _, _, _, [_, 28], [_, 6]],
            [[9, _], _, _, [_, _], [30, _], _, _, _, _, _, _, [_, _], [8, 22], _, _, [_, 4], [19, 10], _, _, _, [_, 6], [27, 9], _, _, _, _, _, _, [10, _], _, _],
            [[3, _], _, _, [_, 3], [14, _], _, _, _, [4, _], _, _, [14, 16], _, _, [20, _], _, _, _, _, [8, 7], _, _, [11, _], _, _, [17, 11], _, _, [6, _], _, _],
            [[_, _], [10, _], _, _, [_, 4], [12, 12], _, _, [_, 9], [_, 9], [24, _], _, _, _, [3, 13], _, _, [_, _], [11, 3], _, _, _, [_, 22], [_, _], [13, 4], _, _, [_, 16], [12, 14], _, _],
            [[_, _], [12, 22], _, _, _, _, [_, _], [3, _], _, _, [28, 3], _, _, _, _, [_, 8], [_, _], [3, 23], _, _, [4, _], _, _, [3, 12], _, _, [23, 12], _, _, _, [_, _]],
            [[16, _], _, _, [11, 12], _, _, [_, 3], [15, 9], _, _, _, _, [_, 11], [5, 15], _, _, [11, 8], _, _, [_, _], [_, _], [28, _], _, _, _, _, _, _, _, [_, 45], [_, 3]],
            [[16, _], _, _, _, [_, 7], [7, _], _, _, [8, 3], _, _, [16, _], _, _, [10, _], _, _, _, [_, _], [_, _], [_, 9], [16, 16], _, _, [5, _], _, _, [_, 14], [6, _], _, _],
            [[18, _], _, _, _, _, [6, 6], _, _, _, [_, 7], [_, _], [4, 12], _, _, [19, _], _, _, _, [_, 17], [7, 8], _, _, _, [_, _], [_, 11], [14, 5], _, _, [9, 12], _, _],
            [[3, _], _, _, [3, 12], _, _, [_, 11], [8, _], _, _, [7, 4], _, _, _, [_, 9], [_, _], [_, _], [34, _], _, _, _, _, _, [3, _], _, _, [17, _], _, _, _, [_, 10]],
            [[_, _], [_, 27], [14, 11], _, _, _, _, [_, 22], [6, 16], _, _, _, [9, 18], _, _, [_, 28], [_, 16], [14, 8], _, _, _, _, [_, 11], [8, 5], _, _, [14, 21], _, _, _, _],
            [[20, _], _, _, _, [_, _], [11, 4], _, _, _, [13, _], _, _, _, [23, _], _, _, _, _, [_, 8], [_, _], [18, _], _, _, _, _, [6, 7], _, _, [4, 9], _, _],
            [[12, _], _, _, [_, _], [19, _], _, _, _, _, [_, 8], [3, 10], _, _, [_, 6], [12, _], _, _, _, _, [_, 9], [_, 22], [16, 10], _, _, _, _, _, [6, _], _, _, [_, _]],
            [[6, _], _, _, [_, 3], [11, 8], _, _, _, [7, 17], _, _, [12, 7], _, _, [14, 4], _, _, [15, 7], _, _, _, _, [_, 4], [_, 14], [4, 6], _, _, [16, 14], _, _, [_, 14]],
            [[12, _], _, _, _, _, [_, _], [18, _], _, _, _, _, _, [15, _], _, _, _, _, _, [45, _], _, _, _, _, _, _, _, _, _, [17, _], _, _],
            [[_, _], [_, _], [6, _], _, _, [_, _], [14, _], _, _, [12, _], _, _, [3, _], _, _, [4, _], _, _, [11, _], _, _, [8, _], _, _, _, [16, _], _, _, [8, _], _, _]
        ])
        expected_solution = Grid([
            [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
            [_, 9, 7, _, 3, 1, _, 9, 3, 1, _, 9, 1, _, 1, 3, _, 1, 3, _, 9, 5, _, 7, 6, _, _, 7, 1, _, _],
            [_, 7, 8, _, 9, 4, 3, 7, 1, 2, 5, 8, 6, _, 4, 5, 3, 7, 2, _, 7, 6, 3, 5, 2, _, _, 8, 3, 2, 7],
            [_, _, 1, 3, _, 6, 5, _, _, _, 2, 5, 4, 1, _, 4, 7, _, 1, 8, _, 2, 1, _, 3, 5, 1, _, _, 5, 9],
            [_, _, 6, 8, _, 3, 1, 4, 2, 6, _, _, _, 2, 6, 7, 9, _, _, 2, 4, _, _, 3, 1, 8, 4, _, _, 3, 8],
            [_, 1, 2, _, 4, 2, _, 2, 3, 1, 6, _, _, _, 3, 2, 1, 9, _, 3, 7, 6, _, 1, 4, 2, _, _, 5, 1, 2],
            [_, 3, 5, 4, 1, _, 2, 1, _, _, 2, 1, 4, 5, _, _, _, 3, 1, _, 5, 9, 8, _, _, 4, 2, 1, 3, _, _],
            [_, _, 4, 8, 5, _, 9, 7, _, 1, 4, 2, 3, 6, _, _, _, _, 2, 4, 9, _, 5, 1, _, _, 1, 4, _, 9, 8],
            [_, 4, 3, _, 7, 9, _, _, _, 8, 1, 3, _, _, 7, 2, 1, _, 5, 8, _, _, _, 3, 4, 1, _, 2, 1, 6, 3],
            [_, 7, 9, _, _, 8, 2, _, 9, 6, _, _, _, _, 3, 1, 4, _, 7, 9, _, 1, 2, _, 3, 2, _, _, 2, 7, 1],
            [_, _, _, 2, 6, 7, 5, 9, 8, 4, _, _, _, 3, 1, _, 7, 9, _, _, 1, 2, 4, 7, _, _, 9, 8, _, 1, 2],
            [_, _, 3, 1, 5, _, 1, 8, _, 7, 6, _, 4, 2, _, _, _, 5, 6, 4, 3, _, 1, 5, _, _, 6, 4, 3, 2, _],
            [_, 8, 9, _, _, 9, 3, _, _, _, 4, 2, 1, _, _, 9, 3, _, 2, 1, 4, _, _, _, 8, 5, _, _, 1, 5, _],
            [_, 9, 1, _, 9, 7, _, 5, 1, _, 2, 1, _, 2, 4, 3, 1, _, 1, 3, _, 9, 7, _, 5, 2, 3, _, _, 4, 1],
            [_, 6, 2, _, 5, 8, 3, 6, 4, 1, _, _, 3, 8, 1, _, _, 9, 4, _, _, 8, 6, 3, 9, 7, 2, _, _, 3, 5],
            [_, _, _, 7, 2, 4, 1, _, 2, 4, _, 9, 7, _, 2, 1, 4, 3, _, _, 8, 6, 3, 1, 7, _, _, _, 7, 8, _],
            [_, _, 8, 9, _, _, _, 1, 6, 2, 4, 8, _, _, 6, 2, 9, 5, _, 7, 9, _, 9, 8, _, 1, 4, 7, 8, _, _],
            [_, 3, 6, _, _, 7, 1, 3, 5, 8, 6, _, _, 5, 3, _, _, 8, 9, 2, _, _, 5, 2, 1, 3, 7, 9, _, 8, 2],
            [_, 1, 2, _, _, 9, 3, 2, _, 3, 1, _, 5, 9, _, 3, 8, 2, 7, _, 2, 6, _, 9, 2, _, 9, 8, _, 5, 1],
            [_, _, 9, 1, _, _, 4, 8, _, _, _, 7, 9, 8, _, 1, 2, _, _, 5, 4, 2, _, _, _, 5, 8, _, _, 9, 3],
            [_, _, 5, 2, 1, 4, _, _, 2, 1, _, 4, 8, 7, 9, _, _, _, 1, 2, _, 1, 3, _, 1, 2, _, 9, 8, 6, _],
            [_, 9, 7, _, 3, 8, _, _, 7, 2, 1, 5, _, _, 4, 1, _, 9, 2, _, _, _, 2, 5, 3, 1, 4, 7, 6, _, _],
            [_, 5, 4, 7, _, _, 1, 6, _, 6, 2, _, 7, 9, _, 3, 1, 6, _, _, _, _, 9, 7, _, 3, 2, _, _, 5, 1],
            [_, 6, 3, 5, 4, _, 2, 3, 1, _, _, _, 3, 1, _, 4, 7, 8, _, _, 2, 4, 1, _, _, _, 6, 8, _, 7, 2],
            [_, 2, 1, _, 1, 2, _, _, 2, 6, _, 4, 1, 2, _, _, _, _, 9, 6, 4, 8, 7, _, 1, 2, _, 3, 8, 6, _],
            [_, _, _, 5, 2, 4, 3, _, _, 1, 3, 2, _, 3, 6, _, _, _, 8, 2, 3, 1, _, _, 5, 3, _, 1, 4, 2, 7],
            [_, 8, 5, 7, _, _, 1, 3, 7, _, 1, 5, 7, _, 3, 9, 4, 7, _, _, _, 3, 9, 4, 2, _, 4, 2, _, 1, 3],
            [_, 9, 3, _, _, 3, 5, 2, 9, _, _, 1, 2, _, _, 6, 3, 1, 2, _, _, _, 2, 1, 3, 4, 6, _, 2, 4, _],
            [_, 4, 2, _, _, 1, 2, 8, _, 5, 2, _, 9, 3, _, 8, 6, _, 6, 1, 5, 3, _, _, _, 1, 3, _, 7, 9, _],
            [_, 6, 1, 2, 3, _, _, 4, 8, 3, 1, 2, _, 1, 3, 5, 2, 4, _, 6, 8, 7, 3, 9, 4, 2, 1, 5, _, 8, 9],
            [_, _, _, 1, 5, _, _, 5, 9, _, 7, 5, _, 2, 1, _, 1, 3, _, 2, 9, _, 1, 5, 2, _, 7, 9, _, 3, 5],
        ])
        game_solver = KakuroSolver(grid)

        solution = game_solver.get_solution()
        self.assertEqual(expected_solution, solution)


if __name__ == '__main__':
    unittest.main()
