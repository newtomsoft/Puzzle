import unittest
from unittest import TestCase

from Domain.Board.Grid import Grid
from Domain.Puzzles.LookAir.LookAirSolver import LookAirSolver

_ = -1


class LookAirSolver12x12Tests(TestCase):
    def test_solution_12x12_evil_0w0w8(self):
        """https://gridpuzzle.com/look-air/0w0w8"""
        grid = Grid([
            [_, _, _, _, 1, _, _, _, _, _, _, 1],
            [_, 1, _, 0, _, 1, _, _, _, 4, _, _],
            [_, _, _, _, 0, 1, _, _, _, _, 1, 1],
            [2, _, _, _, _, _, _, _, _, _, _, _],
            [_, _, _, _, _, _, _, 3, _, _, 1, _],
            [_, _, _, _, _, _, _, _, 1, _, _, 0],
            [_, _, _, _, _, _, _, _, _, 1, _, _],
            [1, _, _, _, _, _, _, _, 2, _, _, _],
            [_, _, _, 3, _, _, _, _, _, _, _, _],
            [_, 2, _, _, _, _, _, 1, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, _, _, 4],
            [_, _, 3, _, _, _, _, _, 2, _, _, _]
        ])

        game_solver = LookAirSolver(grid)

        solution = game_solver.get_solution()
        expected_solution = Grid([
            [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1],
            [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0],
            [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1],
            [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1],
            [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1]]
        )
        self.assertEqual(expected_solution, solution)

    def test_solution_12x12_evil_5rrdr(self):
        """https://gridpuzzle.com/look-air/5rrdr"""
        grid = Grid([
            [_, 1, _, _, _, _, 1, _, _, _, 3, _],
            [_, _, _, _, _, 1, _, 1, _, _, _, _],
            [_, 5, _, _, _, _, _, _, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, 4, _, _],
            [_, _, _, _, _, _, _, _, _, _, _, _],
            [_, 3, _, _, _, _, _, _, _, 4, 1, _],
            [_, _, 1, _, _, _, _, _, _, _, _, _],
            [_, _, _, _, 1, _, 2, _, _, _, _, _],
            [_, 1, _, _, _, _, _, _, _, _, _, _],
            [_, _, _, 2, 1, _, _, _, _, _, 2, _],
            [_, _, 1, _, _, _, _, _, 1, _, _, _],
            [_, 1, _, _, _, _, _, _, _, _, 1, 1]
        ])

        game_solver = LookAirSolver(grid)

        solution = game_solver.get_solution()
        expected_solution = Grid([
            [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],
            [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
            [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0],
            [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
            [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
            [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0],
            [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0],
            [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0],
            [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1]
        ])
        self.assertEqual(expected_solution, solution)

    def test_solution_12x12_evil_614wr(self):
        """https://gridpuzzle.com/look-air/614wr"""
        grid = Grid([
            [_, _, _, _, _, _, _, _, _, _, 2, _],
            [1, 3, _, 2, 1, 1, _, _, _, _, _, _], 
            [_, _, _, _, _, _, _, 2, _, _, _, _],
            [2, _, _, _, _, _, _, 1, _, _, _, _], 
            [_, _, _, _, _, _, _, _, _, _, _, 3],
            [_, 1, _, _, _, _, _, _, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, _, 3, _], 
            [1, _, _, _, _, _, _, _, _, _, _, _],
            [_, _, _, _, 2, _, _, _, _, _, _, 1],
            [_, _, _, _, 3, _, _, _, _, _, _, _],
            [_, _, _, _, _, _, 1, 2, 1, _, 3, 3],
            [_, 1, _, _, _, _, _, _, _, _, _, _]
        ])

        game_solver = LookAirSolver(grid)

        solution = game_solver.get_solution()
        expected_solution = Grid([
            [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0],
            [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0],
            [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1],
            [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0],
            [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1],
            [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1],
            [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1]
        ])
        self.assertEqual(expected_solution, solution)

    def test_solution_12x12_evil_6159n(self):
        """https://gridpuzzle.com/look-air/6159n"""
        grid = Grid([
            [_, 1, _, 2, _, _, _, 1, _, _, _, _], 
            [_, _, _, 1, _, _, _, 1, _, _, 1, 1],
            [3, _, _, _, _, _, _, 1, _, _, _, _],
            [_, 3, _, _, _, 5, _, _, _, _, _, _],
            [_, _, _, 2, _, _, _, 1, _, 1, _, _],
            [_, _, 4, _, _, _, _, _, 1, _, _, 1],
            [1, _, _, 4, _, _, _, _, _, 1, _, _],
            [_, _, 4, _, 2, _, _, _, 1, _, _, _],
            [_, _, _, _, _, _, 2, _, _, _, 1, _],
            [_, _, _, _, 1, _, _, _, _, _, _, 1],
            [1, 1, _, _, 2, _, _, _, 2, _, _, _],
            [_, _, _, _, 1, _, _, _, 1, _, 3, _]
        ])

        game_solver = LookAirSolver(grid)

        solution = game_solver.get_solution()
        expected_solution = Grid([
            [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1],
            [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0],
            [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
            [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1],
            [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0],
            [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0],
            [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0],
            [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1],
            [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1]
        ])
        self.assertEqual(expected_solution, solution)

    def test_solution_12x12_evil_d9990(self):
        """https://gridpuzzle.com/look-air/d9990"""
        grid = Grid([
            [_, 3, _, _, _, 1, _, _, _, _, _, _],
            [1, _, _, _, _, _, _, _, _, 1, _, _], 
            [_, _, _, 1, _, _, 1, _, _, _, 3, _],
            [_, _, _, 0, _, _, _, _, _, 2, _, _],
            [_, _, _, _, _, _, _, _, _, _, _, 1], 
            [_, _, _, _, _, _, _, 1, _, 2, _, _],
            [1, _, _, 3, _, _, 3, _, _, _, 1, _], 
            [1, 1, 3, _, _, _, _, _, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, _, _, _],
            [_, _, 1, _, _, _, _, _, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, _, 2, _],
            [1, _, _, _, _, 3, _, _, _, _, _, _]
        ])

        game_solver = LookAirSolver(grid)

        solution = game_solver.get_solution()
        expected_solution = Grid([
            [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],
            [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0],
            [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0],
            [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1],
            [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0]
        ])
        self.assertEqual(expected_solution, solution)

    def test_solution_12x12_evil_edeng(self):
        """https://gridpuzzle.com/look-air/edeng"""
        grid = Grid([
            [_, _, _, _, _, 3, _, _, _, _, _, _],
            [_, _, 2, _, _, _, _, 1, _, _, _, _], 
            [_, 1, _, _, 1, _, _, _, _, _, _, 2],
            [_, _, 3, _, _, _, _, _, _, _, _, _], 
            [_, _, _, 3, _, _, 1, 2, _, 2, _, _],
            [_, 1, _, _, _, 1, _, _, _, _, _, _],
            [_, _, _, _, _, _, _, _, _, 1, _, _],
            [_, 1, _, _, _, _, _, _, _, 3, _, _], 
            [_, _, _, _, _, _, _, _, _, _, _, _],
            [_, 1, 1, _, 2, _, 2, _, _, _, _, _], 
            [_, _, _, _, _, _, _, _, 2, _, _, _], 
            [_, _, _, _, _, _, _, 1, _, _, _, _]
        ])

        game_solver = LookAirSolver(grid)

        solution = game_solver.get_solution()
        expected_solution = Grid([
            [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
        ])
        self.assertEqual(expected_solution, solution)


if __name__ == '__main__':
    unittest.main()
